{"ast":null,"code":"var _jsxFileName = \"/Users/alexmaneri/quizzer_start/src/quizzer/QuizEdit.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { QuestionEdit } from \"./QuestionEdit\";\nimport \"./QuizEdit.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuizEdit = _ref => {\n  _s();\n\n  let {\n    quiz,\n    editQuiz,\n    deleteQuiz,\n    switchEdit,\n    resetView\n  } = _ref;\n  const [editedQuiz, setEditedQuiz] = useState({ ...quiz\n  });\n\n  const handleEditQuestion = (questionId, updatedQuestion) => {\n    const updatedQuestions = editedQuiz.questionList.map(q => q.id === questionId ? updatedQuestion : q);\n    setEditedQuiz({ ...editedQuiz,\n      questionList: updatedQuestions\n    });\n  };\n\n  const handleRemoveQuestion = questionId => {\n    const updatedQuestions = editedQuiz.questionList.filter(q => q.id !== questionId);\n    setEditedQuiz({ ...editedQuiz,\n      questionList: updatedQuestions\n    });\n  };\n\n  const handleSwapQuestion = (idx1, idx2) => {\n    const updatedQuestions = [...editedQuiz.questionList];\n    const temp = updatedQuestions[idx1];\n    updatedQuestions[idx1] = updatedQuestions[idx2];\n    updatedQuestions[idx2] = temp;\n    setEditedQuiz({ ...editedQuiz,\n      questionList: updatedQuestions\n    });\n  };\n\n  const handleSaveChanges = () => {\n    editQuiz(quiz.id, editedQuiz);\n    switchEdit();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit_header\",\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formEditQuizId\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title_published_flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"edit_title_area\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Title: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              value: editedQuiz.title,\n              onChange: e => setEditedQuiz({ ...editedQuiz,\n                title: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            className: \"published_check\",\n            type: \"checkbox\",\n            id: \"is-published_check\",\n            label: \"Quiz Published\",\n            checked: editedQuiz.published,\n            onChange: e => setEditedQuiz({ ...editedQuiz,\n              published: e.target.checked\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          rows: 3,\n          value: editedQuiz.body,\n          onChange: e => setEditedQuiz({ ...editedQuiz,\n            body: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: editedQuiz.questionList.map((q, index) => /*#__PURE__*/_jsxDEV(QuestionEdit, {\n        index: index,\n        lastIndex: editedQuiz.questionList.length - 1,\n        question: q,\n        editQuestion: handleEditQuestion,\n        removeQuestion: handleRemoveQuestion,\n        swapQuestion: handleSwapQuestion\n      }, editedQuiz.id + \"|\" + q.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"add_question_button\",\n        onClick: () => {\n          setEditedQuiz({ ...editedQuiz,\n            questionList: [...editedQuiz.questionList, {\n              id: editedQuiz.questionList.length + 1,\n              name: \"\",\n              body: \"Example Question\",\n              type: \"short_answer_question\",\n              options: [],\n              submission: \"\",\n              expected: \"Example Answer\",\n              points: 1,\n              published: false\n            }]\n          });\n        },\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit_footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            onClick: handleSaveChanges,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"warning\",\n            onClick: switchEdit,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: () => {\n            deleteQuiz(quiz.id);\n            resetView();\n          },\n          children: \"Delete Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuizEdit, \"OaFANyJwy9BMPjDJT8atxQW7cN4=\");\n\n_c = QuizEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizEdit\");","map":{"version":3,"sources":["/Users/alexmaneri/quizzer_start/src/quizzer/QuizEdit.tsx"],"names":["React","useState","Button","Form","QuestionEdit","QuizEdit","quiz","editQuiz","deleteQuiz","switchEdit","resetView","editedQuiz","setEditedQuiz","handleEditQuestion","questionId","updatedQuestion","updatedQuestions","questionList","map","q","id","handleRemoveQuestion","filter","handleSwapQuestion","idx1","idx2","temp","handleSaveChanges","title","e","target","value","published","checked","body","index","length","name","type","options","submission","expected","points"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { Question } from \"../interfaces/question\";\nimport { Quiz } from \"../interfaces/quiz\";\nimport { QuestionEdit } from \"./QuestionEdit\";\n\nimport \"./QuizEdit.css\";\n\ntype QuizEditProps = {\n    quiz: Quiz;\n    editQuiz: (qId: number, newQuiz: Quiz) => void;\n    deleteQuiz: (qId: number) => void;\n    switchEdit: () => void;\n    resetView: () => void;\n};\n\nexport const QuizEdit: React.FC<QuizEditProps> = ({\n    quiz,\n    editQuiz,\n    deleteQuiz,\n    switchEdit,\n    resetView\n}) => {\n    const [editedQuiz, setEditedQuiz] = useState<Quiz>({ ...quiz });\n\n    const handleEditQuestion = (\n        questionId: number,\n        updatedQuestion: Question\n    ) => {\n        const updatedQuestions = editedQuiz.questionList.map((q) =>\n            q.id === questionId ? updatedQuestion : q\n        );\n        setEditedQuiz({ ...editedQuiz, questionList: updatedQuestions });\n    };\n\n    const handleRemoveQuestion = (questionId: number) => {\n        const updatedQuestions = editedQuiz.questionList.filter(\n            (q) => q.id !== questionId\n        );\n        setEditedQuiz({ ...editedQuiz, questionList: updatedQuestions });\n    };\n\n    const handleSwapQuestion = (idx1: number, idx2: number) => {\n        const updatedQuestions = [...editedQuiz.questionList];\n        const temp = updatedQuestions[idx1];\n        updatedQuestions[idx1] = updatedQuestions[idx2];\n        updatedQuestions[idx2] = temp;\n        setEditedQuiz({ ...editedQuiz, questionList: updatedQuestions });\n    };\n\n    const handleSaveChanges = () => {\n        editQuiz(quiz.id, editedQuiz);\n        switchEdit();\n    };\n\n    return (\n        <div>\n            <div className=\"edit_header\">\n                <Form.Group controlId=\"formEditQuizId\">\n                    <div className=\"title_published_flex\">\n                        <div className=\"edit_title_area\">\n                            <Form.Label>Title: </Form.Label>\n                            <Form.Control\n                                value={editedQuiz.title}\n                                onChange={(e) =>\n                                    setEditedQuiz({\n                                        ...editedQuiz,\n                                        title: e.target.value\n                                    })\n                                }\n                            />\n                        </div>\n                        <Form.Check\n                            className=\"published_check\"\n                            type=\"checkbox\"\n                            id=\"is-published_check\"\n                            label=\"Quiz Published\"\n                            checked={editedQuiz.published}\n                            onChange={(e) =>\n                                setEditedQuiz({\n                                    ...editedQuiz,\n                                    published: e.target.checked\n                                })\n                            }\n                        />\n                    </div>\n                    <Form.Label>Description: </Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={3}\n                        value={editedQuiz.body}\n                        onChange={(e) =>\n                            setEditedQuiz({\n                                ...editedQuiz,\n                                body: e.target.value\n                            })\n                        }\n                    />\n                </Form.Group>\n            </div>\n\n            <div>\n                {editedQuiz.questionList.map((q, index) => (\n                    <QuestionEdit\n                        key={editedQuiz.id + \"|\" + q.id}\n                        index={index}\n                        lastIndex={editedQuiz.questionList.length - 1}\n                        question={q}\n                        editQuestion={handleEditQuestion}\n                        removeQuestion={handleRemoveQuestion}\n                        swapQuestion={handleSwapQuestion}\n                    />\n                ))}\n            </div>\n            <hr />\n            <div>\n                <Button\n                    className=\"add_question_button\"\n                    onClick={() => {\n                        setEditedQuiz({\n                            ...editedQuiz,\n                            questionList: [\n                                ...editedQuiz.questionList,\n                                {\n                                    id: editedQuiz.questionList.length + 1,\n                                    name: \"\",\n                                    body: \"Example Question\",\n                                    type: \"short_answer_question\",\n                                    options: [],\n                                    submission: \"\",\n                                    expected: \"Example Answer\",\n                                    points: 1,\n                                    published: false\n                                }\n                            ]\n                        });\n                    }}\n                >\n                    Add Question\n                </Button>\n                <div className=\"edit_footer\">\n                    <div>\n                        <Button variant=\"success\" onClick={handleSaveChanges}>\n                            Save\n                        </Button>\n                        <Button variant=\"warning\" onClick={switchEdit}>\n                            Cancel\n                        </Button>\n                    </div>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => {\n                            deleteQuiz(quiz.id);\n                            resetView();\n                        }}\n                    >\n                        Delete Quiz\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}